Classe IniciarJogo

public class IniciarJogo {
	//Método estático main que será chamado na execução do programa
	public static void main(String[] args) {
		// Instância da classe que controla o jframe e os jpanels
		Janela5 j5 = new Janela5();
		j5.start();
	}

}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Classe Lobby 

-
	// Construtor do jpanel lobby recebe um Jframe para manipulação e uma instância da classe janela
	public Lobby(JFrame janela, Janela5 j5) {

-
	// Este método é, assim como em outras classes, responsável por atualizar a tela e tornar a 
	//classe "runnable"
	@Override
	public void run() {
        
        while (true) {
            
            atualiza();
            
            repaint();
           
            dorme();
        }
    }

- 
	// Método atualiza é responsável por atualizar variáveis de controle como timer e indice (funciona de mesma forma em outras classes porém com outras variaveis)
	private void atualiza() {

		timer++;
		if (timer >= 4) {
			
			indice++;
			if (indice == 10)
				indice = 0;
			
			timer = 0;
		}

	}

-
// Responsável por reduzir o ritmo de atualização da Thread
	private void dorme() {
        
        try { 
            Thread.sleep(16);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

-
	// Método responsável por pintar imagens na tela, nesse caso é o gif do robo no lobby
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponents(g);
		
		Graphics2D g2d = (Graphics2D) g.create();
		
		g.setColor(Color.gray);
		g.fillRect(0, 0, 1000, 700);
		
		pintar(g2d);

	}

-
	// Método que atualiza o indice do gif e utiliza o componente g2d para pintar no paint component
	public void pintar(Graphics2D g2d) {
		g2d.drawImage(imgRobo[indice], 430, 120, 430 + 150, 120 + 150, 0, 0,
				imgRobo[indice].getWidth(), imgRobo[indice].getHeight(), null);
	}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Classe Janela5


-
// Método utilizado para passar o cache para o jpanel jogo 
	public void inputaCache(int x, int y, int dir, int codFase)

-
// Método utilizado para iniciar o processo jogo com ou sem cache (save)
	public void carregar ()

-
// Método chamado pela classe de início para instanciar e administrar o jpanel do lobby e outras dependências
	// utilizadas pela classe Jogo
	public void start() 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Classe Jogo

-
// Construtor recebendo um obj do tipo controle e um jframe para manipulação
	public Jogo(Controle controle, JFrame janela)

-
// Método que carrega o cache passado pelo jpanel lobby e pela classe Janela5 
	public void carregarCache()

-
// Método utilizado para atualizar a tela e eventos corriqueiros
	public void atualiza() 

-
// Método utilizado para carregar as imagens do cenário
	private void carregaTiles()

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Classe Robo

-
// Método responsável por atualizar variáveis de controle e administrar os estados da instância do robo
	public void atualizar() 

-
// Método que pinta o robô com base no estado e nos indices
	public void pintar(Graphics2D g) 

-
// Método responsável pela lógica do pulo do robo
	public void iniciaPulo() 

-
// Método responsável pela lógica do carrinho do robo
	public void iniciaCarrinho() 

-
// Método responsável pela lógica da morte do robo
	public void morra() 

-
// Instância de tiro com base na ultima direção do robo e regras logicas pro tiro funcionar em concordancia com o personagem
	public Tiro atira()

-
// Método que controla as variaveis de colisão com o chão do robo
	public void encontrouChao() 

-
// Método responsável por reiniciar o robo na tela
	public void reiniciarRobo()

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Classe Controle

-
// Método responsável por "ouvir" quando uma tecla é pressionada e executar uma ação
	@Override
	public void keyPressed(KeyEvent e) 

-
// Método responsável por "ouvir" quando uma tecla é solta e executar uma ação
	@Override
	public void keyReleased(KeyEvent e)


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Classe Fase

-
// A classe fase tem sua maior importância no construtor, onde ela irá ler um arquivo txt com as coordenadas dos Tiles e dos inimigos e adicionara em objetos, arrays e pintará na tela
	public Fase(String nomeArquivo, ArrayList<BufferedImage> tiles) 


-
// Responsável por pintar os tiles e inimigos
	public void pintar(Graphics g)

-
// Método importante para identificar o tile "porta" e adicionar um controle a ela 
	public ArrayList<Tile> getPortas()
